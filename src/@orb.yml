version: 2.1
docker-auth: &docker-auth
  auth:
    username: $DOCKERHUB_USERNAME
    password: $DOCKERHUB_PASSWORD
jobs:
  tflint:
    description: tf lint catch errors as provider-specific issues
    docker:
    - image: hashicorp/terraform:<< parameters.version >>
      <<: *docker-auth
    steps:
    - checkout
    - run: apk add --update curl
    - run:
        name: installing tflint
        command: |
          curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip && unzip tflint.zip && rm tflint.zip
          mkdir -p $HOME/bin && cp ./tflint $HOME/bin/tflint
          install tflint $HOME/bin/
    - run:
        name: running tflint
        command: |
          set +e
          echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
          source $BASH_ENV
          echo "####################################### TFLINT required changes: ###################################"
          isError=0
          if [  << parameters.recursive >> == true ]; then
            for subfolder in $(find << parameters.folder >> -name ".?*" -prune -o -type d -print) ; do
              cd $subfolder
              echo "-------------------------------- $subfolder --------------------------------"
              terraform init << parameters.tf_init_cli_args >> || isError=1
              tflint << parameters.tf_lint_cli_args >> || isError=1
              cd - > /dev/null
              printf "\n\n\n\n\n"
            done
          else
            terraform init << parameters.tf_init_cli_args >> << parameters.folder >>|| isError=1
            tflint << parameters.tf_lint_cli_args >>  << parameters.folder >> || isError=1
          fi
          exit $isError
    parameters:
      folder:
        description: Folder containing the terraform files
        default: "."
        type: string
      version:
        description: Terraform version
        default: 0.14.5
        type: string
      tf_lint_cli_args:
        description: Additional CLI for terraform lint
        default: ""
        type: string
      tf_init_cli_args:
        description: Additional CLI for terraform plan
        default: -backend-config=bucket=tf-state-${AWS_ACCOUNT_ID} -backend-config=key=${CIRCLE_PROJECT_REPONAME}/terraform.tfstate
        type: string
      recursive:
        description: Recursive tflint in the specify folder
        default: false
        type: boolean
  plan:
    description: terraform plan with the specified parameters. To be linked with the apply-plan job
    docker:
      - image: 'hashicorp/terraform:<< parameters.version >>'
        <<: *docker-auth
    steps:
      - checkout
      - steps: << parameters.pre-plan-steps >>
      - run: terraform fmt -check << parameters.folder >>
      - run: terraform init << parameters.tf_init_cli_args >> << parameters.folder>>
      - run: terraform workspace select << parameters.workspace >> << parameters.folder >> || terraform workspace new << parameters.workspace >> << parameters.folder >>
      - run: terraform plan -out=terraform.plan << parameters.tf_plan_cli_args >> << parameters.folder >>
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.terraform
            - project/.terraform.lock.hcl
            - project/terraform.plan
    parameters:
      version:
        description: Terraform version
        default: 0.14.5
        type: string
      pre-plan-steps:
        description: Steps that will run before the plan (commonly used for zip files or add something needed by the plan)
        type: steps
        default: []
      folder:
        description: Folder containing the terraform files
        default: .
        type: string
      workspace:
        description: Terraform workspace
        default: '${CIRCLE_BRANCH}'
        type: string
      tf_plan_cli_args:
        description: Additional CLI for terraform plan
        default: -lock-timeout=480s
        type: string
      tf_init_cli_args:
        description: Additional CLI for terraform plan
        default: -backend-config=bucket=tf-state-${AWS_ACCOUNT_ID} -backend-config=key=${CIRCLE_PROJECT_REPONAME}/terraform.tfstate
        type: string
    environment:
      TF_IN_AUTOMATION: 'Yes'
      TF_INPUT: 'false'
  apply-plan:
    description: 'terraform apply of the previous plan job, with the specified parameters'
    docker:
      - image: 'hashicorp/terraform:<< parameters.version >>'
        <<: *docker-auth
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - steps: << parameters.pre-apply-steps >>
      - run: terraform apply -auto-approve terraform.plan
    parameters:
      version:
        description: Terraform version
        default: 0.14.5
        type: string
      pre-apply-steps:
        description: Steps that will run before the apply (commonly used to install additional binaries needed by the apply)
        type: steps
        default: []
    environment:
      TF_IN_AUTOMATION: 'Yes'
      TF_INPUT: 'false'
  deploy:
    description: terraform auto-approved apply with the specified parameters
    docker:
      - image: 'hashicorp/terraform:<< parameters.version >>'
        <<: *docker-auth
    steps:
      - checkout
      - run: terraform fmt -check << parameters.folder >>
      - run:  terraform init << parameters.tf_init_cli_args >> << parameters.folder >>
      - run: terraform workspace select << parameters.workspace >> << parameters.folder >> || terraform workspace new << parameters.workspace >> << parameters.folder >>
      - steps: << parameters.pre-apply-steps >>
      - run: terraform apply -auto-approve << parameters.tf_apply_cli_args >> << parameters.folder >>
    parameters:
      version:
        description: Terraform version
        default: 0.14.5
        type: string
      folder:
        description: Folder containing the terraform files
        default: .
        type: string
      workspace:
        description: Terraform workspace
        default: '${CIRCLE_BRANCH}'
        type: string
      tf_apply_cli_args:
        description: Additional CLI for terraform plan
        default: ''
        type: string
      tf_init_cli_args:
        description: Additional CLI for terraform plan
        default: -backend-config=bucket=tf-state-${AWS_ACCOUNT_ID} -backend-config=key=${CIRCLE_PROJECT_REPONAME}/terraform.tfstate
        type: string
      pre-apply-steps:
        description: Steps that will run before the apply (commonly used to install additional binaries needed by the apply)
        type: steps
        default: []
    environment:
      TF_IN_AUTOMATION: 'Yes'
      TF_INPUT: 'false'
